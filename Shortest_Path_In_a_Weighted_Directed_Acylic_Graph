//SHORTEST PATH IN A WEIGHTED DIRECTED ACYLIC GRAPH
#include<bits/stdc++.h>
using namespace std;
void dfsTopo(int node, vector<int> &vis, vector<pair<int, int>>adj[], stack<int>&st){
	vis[node] = 1;

	for(auto it : adj[node]){
		if(!vis[it.first]){
			dfsTopo(it.first, vis, adj, st);

		}
	}
	st.push(node);
}
void shortestPath(int src, int V, vector<pair<int, int>> adj[]){
	vector<int>vis(V, 0);
	stack<int>st;
	
	for(int i = 0;i < V;i++){
		if(!vis[i]){
			dfsTopo(i, vis, adj, st);
		}
	}

	vector<int>dist(V, INT_MAX);
	dist[src] = 0;

	while(!st.empty()){
		int node = st.top();
		st.pop();
		if(dist[node] != INT_MAX){
			for(auto it : adj[node]){
				if(dist[node] + it.second < dist[it.first]){
					dist[it.first] = dist[node] + it.second;
				}
			}
		}
	}

	for(int i = 0;i < V;i++){
		if(dist[i] == INT_MAX){
			cout<< i<<  "  " << "inf"<<endl;
		}
		else{
			cout<< i<<  "  " << dist[i]<<endl;

		}
	}

}
int main(){
	int n,m;
	cin>>n>>m;
	vector<pair<int ,int>>adj[n];
	for(int i=0;i<m;i++){
		int u,v,wt;
		cin>>u>>v>>wt;
		adj[u].push_back(make_pair(v,wt));
	}
	shortestPath(0,n,adj);
	return 0;
}
