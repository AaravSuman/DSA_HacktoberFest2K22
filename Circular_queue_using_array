
// This is Circular queue using array

#include<iostream>
using namespace std;

class queue_sung_array {
private:
   int *data;
   int front, rear;
   int capicity, size;

public :
   queue_sung_array(int capicity) {
      data = new int(capicity);
      this->capicity = capicity;
      size = 0;
      front = 0;
      rear = 0;
   }

   int getsize() {
      return size;
   }

   bool isempty() {
      return size == 0;
   }

   bool isfull() {
      return size == capicity;
   }

   void enqueue(int data) {
      if (isfull()) {
         cout << "queue id full";
         return;
      } else {
         this->data[rear] = data;
         rear = (rear + 1) % capicity;
         size++;
      }
   }

   int dequeue() {
      if (isempty()) {
         cout << "queue is empty";
         return - 1;
      } else {
         int ans =  data[front];
         front = (front + 1) % capicity;
         size--;
         if (size == 0) {
            front = 0;
            rear = 0;
         }
         return ans;
      }
   }

   int front_element() {
      return data[front];
   }
};

int main() {
   queue_sung_array q(5);
   q.enqueue(1);
   q.enqueue(2);
   q.enqueue(3);
   q.enqueue(4);
   q.enqueue(5);
   q.enqueue(5);
   cout << q.front_element() << endl;
   cout << q.dequeue() << endl;
   cout << q.dequeue() << endl;
   cout << q.dequeue() << endl;
   cout << q.dequeue() << endl;
   cout << q.dequeue() << endl;
   cout << q.dequeue() << endl;

   q.enqueue(8);
   q.enqueue(9);
   cout << q.dequeue() << endl;
   cout << q.dequeue() << endl;
   cout << q.dequeue() << endl;
}
